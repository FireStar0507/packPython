    - name: 查找未构建的项目并构建它们
      run: |
        mkdir -p dist
        for project_dir in script/*/; do
          project_name=$(basename "$project_dir")
          dist_file="${{ github.workspace }}/dist/${project_name}.tar.gz"
          if [ ! -f "$dist_file" ]; then
            cd "$project_dir"
            echo "当前目录结构:"
            ls -la
            
            # 解析 set.json 获取配置信息
            packaging_platform=$(jq -r '.packaging_platform // "pyinstaller"' set.json)
            python_version=$(jq -r '.python_version // "3.8"' set.json)
            python_dependencies=$(jq -r '.python_dependencies[] // empty' set.json)
            command=$(jq -r '.command // ""' set.json)

            # 更新Python环境到指定版本
            if [[ -n "$python_version" ]]; then
              echo "将Python版本设置为 $python_version"
              python -m pip install --upgrade pip
              echo "使用python版本 $python_version"
              echo "python-version=$python_version" >> $GITHUB_ENV
            fi

            # 安装项目依赖
            for dep in $python_dependencies; do
              pip install "$dep"
            done

            # 根据打包平台进行操作
            if [ "$packaging_platform" == "pyinstaller" ]; then
              # 安装 pyinstaller
              pip install pyinstaller

              # 直接执行命令
              if [ -n "$command" ]; then
                eval "$command" || { echo "执行命令失败"; exit 1; }
              else
                echo "未提供完整的命令，构建失败。"
                exit 1
              fi

              # 将生成的可执行文件及相关资源打包
              tar -czvf "$dist_file" dist/ "$(basename "$app_file" .py)"
            else
              echo "不支持的打包平台: $packaging_platform"
              exit 1
            fi
            cd -
          fi
        done
